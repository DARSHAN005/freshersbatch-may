
1)MongoDB Exercise in mongo shellConnect to a running mongo instance, use a database namedmongo_practice.Document all your queries in a javascript file to use as a reference.Insert DocumentsInsert the following documents into amoviescollection.

 use mongo_practice
switched to db mongo_practice
> db.createCollection("movies")
{ "ok" : 1 }
> show collections
movies


> db.movies.insert({"title":"Fight Club","writer":"Chuck Palahniuko","year":1999, "actors":["Brad pitt","Edward Nortan"]})
WriteResult({ "nInserted" : 1 })
> db.employess.find().pretty()
> db.movies.find().pretty()
{
        "_id" : ObjectId("62868b2ef36ddc8e4e02c563"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad pitt",
                "Edward Nortan"
        ]
}



> db.movies.insert({"title":"Pulp Fiction","writer":"Quentin Tarantino","year":1994, "actors":["John Travolta","Uma Thurman"]})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({"title":"Inglorious Basterds","writer":"Quentin Tarantino","year":2009, "actors":["Brad Pitt","Diane Kruger","Eli Roth"]})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({"title":"The Hoobit:An unexpected journey","writer":"J.R.R. Tolkein","year":2012, "franchise":"The Hobbit"})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({"title":"The Hoobit:The Desolation of Smaug","writer":"J.R.R. Tolkein","year":2013, "franchise":"The Hobbit"})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({"title":"The Hobbit:The battle of the five armies","writer":"J.R.R. Tolkein","year":2012, "franchise":"The Hobbit", "synopsis":"Bilbo and company are forced to enage in war"})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({"title":"Pee Wee Herman's Big Adventure"})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({"title":"Avatar"})
WriteResult({ "nInserted" : 1 })
> db.movies.find().pretty()
{
        "_id" : ObjectId("62868b2ef36ddc8e4e02c563"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad pitt",
                "Edward Nortan"
        ]
}
{
        "_id" : ObjectId("62868d15215fdf7f00d76da9"),
        "title" : "Pulp Fiction",
        "writer" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("62868d88215fdf7f00d76daa"),
        "title" : "Inglorious Basterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("62868deb215fdf7f00d76dab"),
        "title" : "The Hoobit:An unexpected journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62868e1a215fdf7f00d76dac"),
        "title" : "The Hoobit:The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62868f34215fdf7f00d76dad"),
        "title" : "The Hobbit:The battle of the five armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and company are forced to enage in war"
}
{
        "_id" : ObjectId("62868f5f215fdf7f00d76dae"),
        "title" : "Pee Wee Herman's Big Adventure"
}
{ "_id" : ObjectId("62868f6b215fdf7f00d76daf"), "title" : "Avatar" }
>
============================================================================================================================================================================================
Query / Find Documentsquery themoviescollection to
1.get all documents

 db.movies.find().pretty()
{
        "_id" : ObjectId("62868b2ef36ddc8e4e02c563"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad pitt",
                "Edward Nortan"
        ]
}
{
        "_id" : ObjectId("62868d15215fdf7f00d76da9"),
        "title" : "Pulp Fiction",
        "writer" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("62868d88215fdf7f00d76daa"),
        "title" : "Inglorious Basterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("62868deb215fdf7f00d76dab"),
        "title" : "The Hoobit:An unexpected journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62868e1a215fdf7f00d76dac"),
        "title" : "The Hoobit:The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62868f34215fdf7f00d76dad"),
        "title" : "The Hobbit:The battle of the five armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and company are forced to enage in war"
}
{
        "_id" : ObjectId("62868f5f215fdf7f00d76dae"),
        "title" : "Pee Wee Herman's Big Adventure"
}
{ "_id" : ObjectId("62868f6b215fdf7f00d76daf"), "title" : "Avatar" }
>


2.get all documents withwriterset to "Quentin Tarantino"
db.movies.find({"writer":"Quentin Tarantino"})
{ "_id" : ObjectId("62868d15215fdf7f00d76da9"), "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : 1994, "actors" : [ "John Travolta", "Uma Thurman" ] }
{ "_id" : ObjectId("62868d88215fdf7f00d76daa"), "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : 2009, "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }



3.get all documents whereactorsinclude "Brad Pitt"
 db.movies.find({"actors":"Brad Pitt"})
{ "_id" : ObjectId("62868d88215fdf7f00d76daa"), "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : 2009, "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }


4.get all documents withfranchiseset to "The Hobbit"
 db.movies.find({"franchise":"The Hobbit"})
{ "_id" : ObjectId("62868deb215fdf7f00d76dab"), "title" : "The Hoobit:An unexpected journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit" }
{ "_id" : ObjectId("62868e1a215fdf7f00d76dac"), "title" : "The Hoobit:The Desolation of Smaug", "writer" : "J.R.R. Tolkein", "year" : 2013, "franchise" : "The Hobbit" }
{ "_id" : ObjectId("62868f34215fdf7f00d76dad"), "title" : "The Hobbit:The battle of the five armies", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and company are forced to enage in war" }

5.get all movies released in the 90s6.get all movies released before the year 2000 or after 2010




=============================================================================================================================================================================================
Update Documents
----------------


1.add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited groupof dwarves to reclaim their mountain home -and the gold within it -from the dragon Smaug."

 db.movies.updateOne({"title":"The Hoobit:An unexpected journey"},{$set:{"synopsis":"A relucant hobbit,Bilbo Baggins,sets out to thr lonely mountain with a spirited group of dwarves to reclaim their mountain home from the dragon Smaug"}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }



2.add a synopsis to "The Hobbit: The Desolation of Smaug" :"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
> db.movies.updateOne({"title":"The Hoobit:The Desolation of Smaug"},{$set:{"synopsis":"The dwarves, along with Bilbo Baggins and Gandalf the grey , continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possesion of a mysterious and magical ring"}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }


3.add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
db.movies.updateOne({"title":"Pulp Fiction"},{$set:{"actors":["Samuel L. Jackson","John Travolta","Uma Thurman"]}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.movies.find().pretty()
{
        "_id" : ObjectId("62868b2ef36ddc8e4e02c563"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad pitt",
                "Edward Nortan"
        ]
}
{
        "_id" : ObjectId("62868d15215fdf7f00d76da9"),
        "title" : "Pulp Fiction",
        "writer" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "Samuel L. Jackson",
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("62868d88215fdf7f00d76daa"),
        "title" : "Inglorious Basterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("62868deb215fdf7f00d76dab"),
        "title" : "The Hoobit:An unexpected journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A relucant hobbit,Bilbo Baggins,sets out to thr lonely mountain with a spirited group of dwarves to reclaim their mountain home from the dragon Smaug"
}
{
        "_id" : ObjectId("62868e1a215fdf7f00d76dac"),
        "title" : "The Hoobit:The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit",
        "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the grey , continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possesion of a mysterious and magical ring",
        "actors" : [
                "Samuel L. Jackson"
        ]
}
{
        "_id" : ObjectId("62868f34215fdf7f00d76dad"),
        "title" : "The Hobbit:The battle of the five armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and company are forced to enage in war"
}
{
        "_id" : ObjectId("62868f5f215fdf7f00d76dae"),
        "title" : "Pee Wee Herman's Big Adventure"
}
{ "_id" : ObjectId("62868f6b215fdf7f00d76daf"), "title" : "Avatar" }
>
===========================================================================================================================================================================================
Text search
--------

1.find all movies that have a synopsis that contains the word "Bilbo"
 db.movies.find({"synopsis":{$regex:"Bilbo"}})
{ "_id" : ObjectId("62868deb215fdf7f00d76dab"), "title" : "The Hoobit:An unexpected journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "A relucant hobbit,Bilbo Baggins,sets out to thr lonely mountain with a spirited group of dwarves to reclaim their mountain home from the dragon Smaug" }
{ "_id" : ObjectId("62868e1a215fdf7f00d76dac"), "title" : "The Hoobit:The Desolation of Smaug", "writer" : "J.R.R. Tolkein", "year" : 2013, "franchise" : "The Hobbit", "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the grey , continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possesion of a mysterious and magical ring", "actors" : [ "Samuel L. Jackson" ] }
{ "_id" : ObjectId("62868f34215fdf7f00d76dad"), "title" : "The Hobbit:The battle of the five armies", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and company are forced to enage in war" }
>

2.find all movies that have a synopsis that contains the word "Gandalf"
> db.movies.find({"synopsis":{$regex:"Gandalf"}})
{ "_id" : ObjectId("62868e1a215fdf7f00d76dac"), "title" : "The Hoobit:The Desolation of Smaug", "writer" : "J.R.R. Tolkein", "year" : 2013, "franchise" : "The Hobbit", "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the grey , continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possesion of a mysterious and magical ring", "actors" : [ "Samuel L. Jackson" ] }
>


3.find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
> db.movies.find({$and:[{"synopsis":{$regex:"Bilbo"}},{$nor:[{"synopsis":{$regex:"Gandalf"}}]}]}).pretty()
{
        "_id" : ObjectId("62868deb215fdf7f00d76dab"),
        "title" : "The Hoobit:An unexpected journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A relucant hobbit,Bilbo Baggins,sets out to thr lonely mountain with a spirited group of dwarves to reclaim their mountain home from the dragon Smaug"
}
{
        "_id" : ObjectId("62868f34215fdf7f00d76dad"),
        "title" : "The Hobbit:The battle of the five armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and company are forced to enage in war"
}
>




4.find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
 db.movies.find({$or:[{"synopsis":{$regex:"dwarves"}},{"synopsis":{$regex:"hobbit"}}]}).pretty()
{
        "_id" : ObjectId("62868deb215fdf7f00d76dab"),
        "title" : "The Hoobit:An unexpected journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A relucant hobbit,Bilbo Baggins,sets out to thr lonely mountain with a spirited group of dwarves to reclaim their mountain home from the dragon Smaug"
}
{
        "_id" : ObjectId("62868e1a215fdf7f00d76dac"),
        "title" : "The Hoobit:The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit",
        "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the grey , continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possesion of a mysterious and magical ring",
        "actors" : [
                "Samuel L. Jackson"
        ]
}



5.find all movies that have a synopsis that contains the word "gold" and "dragon"
 db.movies.find({$and:[{"synopsis":{$regex:"dragon"}},{"synopsis":{$regex:"gold"}}]}).pretty()
{
        "_id" : ObjectId("62868deb215fdf7f00d76dab"),
        "title" : "The Hoobit:An unexpected journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A relucant hobbit,Bilbo Baggins,sets out to thr lonely mountain with a spirited group of dwarves to reclaim their mountain home from the dragon Smaug"
}

=========================================================================================================================================

Delete Documents
1.delete the movie "Pee Wee Herman's Big Adventure"
2.delete the movie "Avatar"

db.movies.delete([{"title":"Pee Wee Herman's Big Adventure"},{"title":"Pee Wee Herman's Big Adventure"}])


> db.movies.find().pretty()
{
        "_id" : ObjectId("62868b2ef36ddc8e4e02c563"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad pitt",
                "Edward Nortan"
        ]
}
{
        "_id" : ObjectId("62868d15215fdf7f00d76da9"),
        "title" : "Pulp Fiction",
        "writer" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "Samuel L. Jackson",
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("62868d88215fdf7f00d76daa"),
        "title" : "Inglorious Basterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("62868deb215fdf7f00d76dab"),
        "title" : "The Hoobit:An unexpected journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A relucant hobbit,Bilbo Baggins,sets out to thr lonely mountain with a spirited group of dwarves to reclaim their mountain home from the dragon Smaug"
}
{
        "_id" : ObjectId("62868e1a215fdf7f00d76dac"),
        "title" : "The Hoobit:The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit",
        "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the grey , continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possesion of a mysterious and magical ring",
        "actors" : [
                "Samuel L. Jackson"
        ]
}
{
        "_id" : ObjectId("62868f34215fdf7f00d76dad"),
        "title" : "The Hobbit:The battle of the five armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and company are forced to enage in war"
}


========================================================================================================================================================================
===========================================================================
===============================================================================================
===============================================================================================================================================================
 > db.posts.insertMany([ { "username":"GoodGuyGreg", "title":"Passesoutatparty", "body":"Wakesupearlyandcleanshouse" }, { "username":"GoodGuyGreg", "title":"Stealsyouridentity", "body":"Raisesyourcreditscore" },         {         "username":"GoodGuyGreg", "title":"Reportsabuginyourcode", "body":"SendsyouaPullRequest" }, {  "username":"ScumbagSteve", "title":"Borrowssomething", "body":"Sellsit" }, { "username":"ScumbagSteve", "title":"Borrowseverything", "body":"Theend" }, { "username":"ScumbagSteve", "title":"Forksyourrepoongithub", "body":"Setstoprivate" } ])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("6289e7a49cc178c683b6f347"),
                ObjectId("6289e7a49cc178c683b6f348"),
                ObjectId("6289e7a49cc178c683b6f349"),
                ObjectId("6289e7a49cc178c683b6f34a"),
                ObjectId("6289e7a49cc178c683b6f34b"),
                ObjectId("6289e7a49cc178c683b6f34c")
        ]
}                  
 ObjectId("6289e7a49cc178c683b6f347")
"username":"GoodGuyGreg",
"title":"Passesoutatparty",
"body":"Wakesupearlyandcleanshouse"


 ObjectId("6289e7a49cc178c683b6f348")
"username":"GoodGuyGreg",
"title":"Stealsyouridentity",
"body":"Raisesyourcreditscore"

 ObjectId("6289e7a49cc178c683b6f349")
"username":"GoodGuyGreg",
"title":"Reportsabuginyourcode",
"body":"SendsyouaPullRequest"

 ObjectId("6289e7a49cc178c683b6f34a"),
"username":"ScumbagSteve",
"title":"Borrowssomething",
"body":"Sellsit"


ObjectId("6289e7a49cc178c683b6f34b")
"username":"ScumbagSteve",
"title":"Borrowseverything",
"body":"Theend"

ObjectId("6289e7a49cc178c683b6f34c")
"username":"ScumbagSteve",
"title":"Forksyourrepoongithub",
"body":"Setstoprivate"
==========================================================
db.comments.insertMany([
{
"username":"GoodGuyGreg",
"comment":"Hope you got a good deal!",
"post": ObjectId("6289e7a49cc178c683b6f34a")
},
{
"username":"GoodGuyGreg",
"comment":"What's mine is yours!",
"post":ObjectId("6289e7a49cc178c683b6f34b")
},
{
"username":"GoodGuyGreg",
"comment":"Don't violate the licensing agreement!",
"post":ObjectId("6289e7a49cc178c683b6f34c")
},
{
"username":"ScumbagSteve",
"comment":"It still isn't clean",
"post":ObjectId("6289e7a49cc178c683b6f347")
},
{
"username":"ScumbagSteve",
"comment":"Denied your PR cause I found a hack",
"post": ObjectId("6289e7a49cc178c683b6f349")
}
])

{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("6289efaa9cc178c683b6f34d"),
                ObjectId("6289efaa9cc178c683b6f34e"),
                ObjectId("6289efaa9cc178c683b6f34f"),
                ObjectId("6289efaa9cc178c683b6f350"),
                ObjectId("6289efaa9cc178c683b6f351")
        ]
}
=====================================================================================
Querying related collections
============================
1.find all users
 db.users.find().pretty()
{
        "_id" : ObjectId("6289e3c29cc178c683b6f346"),
        "username" : "ScumbagSteve",
        "first_name" : "Good Guy",
        "last_name" : "Greg",
        "full_name" : {
                "first" : "Scumbag",
                "last" : "Steve"
        }
}


2.find all posts

> db.posts.find().pretty()
{
        "_id" : ObjectId("6289e7a49cc178c683b6f347"),
        "username" : "GoodGuyGreg",
        "title" : "Passesoutatparty",
        "body" : "Wakesupearlyandcleanshouse"
}
{
        "_id" : ObjectId("6289e7a49cc178c683b6f348"),
        "username" : "GoodGuyGreg",
        "title" : "Stealsyouridentity",
        "body" : "Raisesyourcreditscore"
}
{
        "_id" : ObjectId("6289e7a49cc178c683b6f349"),
        "username" : "GoodGuyGreg",
        "title" : "Reportsabuginyourcode",
        "body" : "SendsyouaPullRequest"
}
{
        "_id" : ObjectId("6289e7a49cc178c683b6f34a"),
        "username" : "ScumbagSteve",
        "title" : "Borrowssomething",
        "body" : "Sellsit"
}
{
        "_id" : ObjectId("6289e7a49cc178c683b6f34b"),
        "username" : "ScumbagSteve",
        "title" : "Borrowseverything",
        "body" : "Theend"
}
{
        "_id" : ObjectId("6289e7a49cc178c683b6f34c"),
        "username" : "ScumbagSteve",
        "title" : "Forksyourrepoongithub",
        "body" : "Setstoprivate"
}
>


3.find all posts that was authored by "GoodGuyGreg"
 db.posts.find({"username":"GoodGuyGreg"}).pretty()
{
        "_id" : ObjectId("6289e7a49cc178c683b6f347"),
        "username" : "GoodGuyGreg",
        "title" : "Passesoutatparty",
        "body" : "Wakesupearlyandcleanshouse"
}
{
        "_id" : ObjectId("6289e7a49cc178c683b6f348"),
        "username" : "GoodGuyGreg",
        "title" : "Stealsyouridentity",
        "body" : "Raisesyourcreditscore"
}
{
        "_id" : ObjectId("6289e7a49cc178c683b6f349"),
        "username" : "GoodGuyGreg",
        "title" : "Reportsabuginyourcode",
        "body" : "SendsyouaPullRequest"
}
>


4.find all posts that was authored by "ScumbagSteve"
 db.posts.find({"username":"ScumbagSteve"}).pretty()
{
        "_id" : ObjectId("6289e7a49cc178c683b6f34a"),
        "username" : "ScumbagSteve",
        "title" : "Borrowssomething",
        "body" : "Sellsit"
}
{
        "_id" : ObjectId("6289e7a49cc178c683b6f34b"),
        "username" : "ScumbagSteve",
        "title" : "Borrowseverything",
        "body" : "Theend"
}
{
        "_id" : ObjectId("6289e7a49cc178c683b6f34c"),
        "username" : "ScumbagSteve",
        "title" : "Forksyourrepoongithub",
        "body" : "Setstoprivate"
}
>

5.find all comments
 db.comments.find().pretty()
{
        "_id" : ObjectId("6289efaa9cc178c683b6f34d"),
        "username" : "GoodGuyGreg",
        "comment" : "Hope you got a good deal!",
        "post" : ObjectId("6289e7a49cc178c683b6f34a")
}
{
        "_id" : ObjectId("6289efaa9cc178c683b6f34e"),
        "username" : "GoodGuyGreg",
        "comment" : "What's mine is yours!",
        "post" : ObjectId("6289e7a49cc178c683b6f34b")
}
{
        "_id" : ObjectId("6289efaa9cc178c683b6f34f"),
        "username" : "GoodGuyGreg",
        "comment" : "Don't violate the licensing agreement!",
        "post" : ObjectId("6289e7a49cc178c683b6f34c")
}
{
        "_id" : ObjectId("6289efaa9cc178c683b6f350"),
        "username" : "ScumbagSteve",
        "comment" : "It still isn't clean",
        "post" : ObjectId("6289e7a49cc178c683b6f347")
}
{
        "_id" : ObjectId("6289efaa9cc178c683b6f351"),
        "username" : "ScumbagSteve",
        "comment" : "Denied your PR cause I found a hack",
        "post" : ObjectId("6289e7a49cc178c683b6f349")
}
>



6.find all comments that was authored by "GoodGuyGreg"
 db.comments.find({"username":"GoodGuyGreg"}).pretty()
{
        "_id" : ObjectId("6289efaa9cc178c683b6f34d"),
        "username" : "GoodGuyGreg",
        "comment" : "Hope you got a good deal!",
        "post" : ObjectId("6289e7a49cc178c683b6f34a")
}
{
        "_id" : ObjectId("6289efaa9cc178c683b6f34e"),
        "username" : "GoodGuyGreg",
        "comment" : "What's mine is yours!",
        "post" : ObjectId("6289e7a49cc178c683b6f34b")
}
{
        "_id" : ObjectId("6289efaa9cc178c683b6f34f"),
        "username" : "GoodGuyGreg",
        "comment" : "Don't violate the licensing agreement!",
        "post" : ObjectId("6289e7a49cc178c683b6f34c")
}

7.find all comments that was authored by "ScumbagSteve"
 db.comments.find({"username":"ScumbagSteve"}).pretty()
{
        "_id" : ObjectId("6289efaa9cc178c683b6f350"),
        "username" : "ScumbagSteve",
        "comment" : "It still isn't clean",
        "post" : ObjectId("6289e7a49cc178c683b6f347")
}
{
        "_id" : ObjectId("6289efaa9cc178c683b6f351"),
        "username" : "ScumbagSteve",
        "comment" : "Denied your PR cause I found a hack",
        "post" : ObjectId("6289e7a49cc178c683b6f349")
}



8.find all comments belonging to the post "Reports a bug in your code"

